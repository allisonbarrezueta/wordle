{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nimport create from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { evaluateGuess, getRandomWord, LetterState } from \"./utils\";\nconst secret = CryptoJS.enc.Utf8.parse(\"\");\nexport const MAX_GUESSES = 6;\nexport let GameState = /*#__PURE__*/function (GameState) {\n  GameState[GameState[\"WON\"] = 0] = \"WON\";\n  GameState[GameState[\"LOST\"] = 1] = \"LOST\";\n  GameState[GameState[\"IN_PROGRESS\"] = 2] = \"IN_PROGRESS\";\n  return GameState;\n}({});\nconst useStore = create(persist(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(set, _get) => ({\n  answer: getRandomWord(),\n  alreadyGuessed: [],\n  gameStatus: {\n    gameOver: false,\n    state: GameState.IN_PROGRESS\n  },\n  keysPressed: {},\n  addGuess: guess => set(state => {\n    const evaluatedGuess = evaluateGuess(state.answer, guess);\n    const _keysPressed = {\n      ...state.keysPressed\n    };\n    evaluatedGuess.forEach((letterState, index) => {\n      if (_keysPressed[guess[index]] !== LetterState.MATCH) {\n        _keysPressed[guess[index]] = letterState;\n      }\n    });\n    const _gameStatus = {\n      ...state.gameStatus\n    };\n    if (evaluatedGuess.every(s => s === LetterState.MATCH)) {\n      _gameStatus.gameOver = true;\n      _gameStatus.state = GameState.WON;\n    } else if (state.alreadyGuessed.length + 1 === MAX_GUESSES) {\n      _gameStatus.gameOver = true;\n      _gameStatus.state = GameState.LOST;\n    }\n    return {\n      gameStatus: _gameStatus,\n      alreadyGuessed: [...state.alreadyGuessed, {\n        word: guess,\n        state: evaluatedGuess\n      }],\n      keysPressed: _keysPressed\n    };\n  }),\n  newGame: () => set(() => ({\n    answer: getRandomWord(),\n    alreadyGuessed: [],\n    gameStatus: {\n      gameOver: false,\n      state: GameState.IN_PROGRESS\n    },\n    keysPressed: {}\n  }))\n}), {\n  name: \"wordle-clone-storage\",\n  serialize: state => {\n    return CryptoJS.AES.encrypt(JSON.stringify(state), secret, {\n      keySize: 128 / 8,\n      iv: secret,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    }).toString();\n  },\n  deserialize: state => {\n    return JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(state, secret, {\n      keySize: 128 / 8,\n      iv: secret,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    })));\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["CryptoJS","create","persist","evaluateGuess","getRandomWord","LetterState","secret","enc","Utf8","parse","MAX_GUESSES","GameState","useStore","set","_get","answer","alreadyGuessed","gameStatus","gameOver","state","IN_PROGRESS","keysPressed","addGuess","guess","evaluatedGuess","_keysPressed","forEach","letterState","index","MATCH","_gameStatus","every","s","WON","length","LOST","word","newGame","name","serialize","AES","encrypt","JSON","stringify","keySize","iv","mode","CBC","padding","pad","Pkcs7","toString","deserialize","decrypt"],"sources":["/Users/jelou/wordle/src/store.ts"],"sourcesContent":["import CryptoJS from \"crypto-js\";\nimport create from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nimport { evaluateGuess, getRandomWord, LetterState } from \"./utils\";\n\nconst secret = CryptoJS.enc.Utf8.parse(\"\");\n\nexport const MAX_GUESSES = 6;\n\nexport type IGuess = {\n  word: string;\n  state?: LetterState[];\n};\n\nexport enum GameState {\n  WON,\n  LOST,\n  IN_PROGRESS,\n}\n\ntype IGameStatus = {\n  gameOver: boolean;\n  state: GameState;\n};\n\nexport type IStoreState = {\n  answer: string;\n  alreadyGuessed: IGuess[];\n  keysPressed: Record<string, LetterState>;\n  addGuess: (guess: string) => void;\n  gameStatus: IGameStatus;\n  newGame: () => void;\n};\n\nconst useStore = create<IStoreState>(\n  persist(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (set: any, _get: any) => ({\n      answer: getRandomWord(),\n      alreadyGuessed: [],\n      gameStatus: {\n        gameOver: false,\n        state: GameState.IN_PROGRESS,\n      },\n      keysPressed: {},\n      addGuess: (guess: string) =>\n        set((state: any) => {\n          const evaluatedGuess = evaluateGuess(state.answer, guess);\n\n          const _keysPressed = { ...state.keysPressed };\n          evaluatedGuess.forEach((letterState, index) => {\n            if (_keysPressed[guess[index]] !== LetterState.MATCH) {\n              _keysPressed[guess[index]] = letterState;\n            }\n          });\n\n          const _gameStatus = { ...state.gameStatus };\n\n          if (evaluatedGuess.every((s) => s === LetterState.MATCH)) {\n            _gameStatus.gameOver = true;\n            _gameStatus.state = GameState.WON;\n          } else if (state.alreadyGuessed.length + 1 === MAX_GUESSES) {\n            _gameStatus.gameOver = true;\n            _gameStatus.state = GameState.LOST;\n          }\n\n          return {\n            gameStatus: _gameStatus,\n            alreadyGuessed: [\n              ...state.alreadyGuessed,\n              {\n                word: guess,\n                state: evaluatedGuess,\n              },\n            ],\n            keysPressed: _keysPressed,\n          };\n        }),\n      newGame: () =>\n        set(() => ({\n          answer: getRandomWord(),\n          alreadyGuessed: [],\n          gameStatus: {\n            gameOver: false,\n            state: GameState.IN_PROGRESS,\n          },\n          keysPressed: {},\n        })),\n    }),\n    {\n      name: \"wordle-clone-storage\",\n      serialize: (state: any) => {\n        return CryptoJS.AES.encrypt(JSON.stringify(state), secret, {\n          keySize: 128 / 8,\n          iv: secret,\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7,\n        }).toString();\n      },\n      deserialize: (state: any) => {\n        return JSON.parse(\n          CryptoJS.enc.Utf8.stringify(\n            CryptoJS.AES.decrypt(state, secret, {\n              keySize: 128 / 8,\n              iv: secret,\n              mode: CryptoJS.mode.CBC,\n              padding: CryptoJS.pad.Pkcs7,\n            })\n          )\n        );\n      },\n    }\n  )\n);\n\nexport default useStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}