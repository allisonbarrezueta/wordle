{"ast":null,"code":"var _jsxFileName = \"/Users/jelou/wordle/src/components/guess/index.tsx\";\nimport { MAX_WORD_LENGTH } from \"../../utils\";\nimport Letter from \"../letter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Guess = _ref => {\n  let {\n    guess,\n    isInvalid\n  } = _ref;\n  const letters = guess.word ? guess.word.split(\"\") : [];\n  const letterList = [...letters, ...Array(MAX_WORD_LENGTH - letters.length).fill(\"\")];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `w-full grid grid-cols-5 gap-2 ${isInvalid ? \"animate-shake\" : \"\"}`,\n    children: letterList.map((letter, index) => /*#__PURE__*/_jsxDEV(Letter, {\n      letter: letter,\n      state: guess.state && guess.state[index]\n    }, `letter-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["MAX_WORD_LENGTH","Letter","jsxDEV","_jsxDEV","Guess","_ref","guess","isInvalid","letters","word","split","letterList","Array","length","fill","className","children","map","letter","index","state","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jelou/wordle/src/components/guess/index.tsx"],"sourcesContent":["import { IGuess } from \"../../store\";\nimport { MAX_WORD_LENGTH } from \"../../utils\";\nimport Letter from \"../letter\";\n\ntype IProps = {\n  guess: IGuess;\n  isInvalid: boolean;\n};\n\nconst Guess = ({ guess, isInvalid }: IProps) => {\n  const letters = guess.word ? guess.word.split(\"\") : [];\n\n  const letterList = [\n    ...letters,\n    ...Array(MAX_WORD_LENGTH - letters.length).fill(\"\"),\n  ];\n\n  return (\n    <div\n      className={`w-full grid grid-cols-5 gap-2 ${\n        isInvalid ? \"animate-shake\" : \"\"\n      }`}\n    >\n      {letterList.map((letter, index) => (\n        <Letter\n          key={`letter-${index}`}\n          letter={letter}\n          state={guess.state && guess.state[index]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Guess;\n"],"mappings":";AACA,SAASA,eAAe,QAAQ,aAAa;AAC7C,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO/B,MAAMC,KAAK,GAAGC,IAAA,IAAkC;EAAA,IAAjC;IAAEC,KAAK;IAAEC;EAAkB,CAAC,GAAAF,IAAA;EACzC,MAAMG,OAAO,GAAGF,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE;EAEtD,MAAMC,UAAU,GAAG,CACjB,GAAGH,OAAO,EACV,GAAGI,KAAK,CAACZ,eAAe,GAAGQ,OAAO,CAACK,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CACpD;EAED,oBACEX,OAAA;IACEY,SAAS,EAAG,iCACVR,SAAS,GAAG,eAAe,GAAG,EAC/B,EAAE;IAAAS,QAAA,EAEFL,UAAU,CAACM,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC5BhB,OAAA,CAACF,MAAM;MAELiB,MAAM,EAAEA,MAAO;MACfE,KAAK,EAAEd,KAAK,CAACc,KAAK,IAAId,KAAK,CAACc,KAAK,CAACD,KAAK;IAAE,GAFnC,UAASA,KAAM,EAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGvB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAvBIrB,KAAK;AAyBX,eAAeA,KAAK;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}