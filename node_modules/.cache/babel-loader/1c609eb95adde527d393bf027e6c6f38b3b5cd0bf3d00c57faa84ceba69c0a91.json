{"ast":null,"code":"import words from \"./lists/words.json\";\nconst MAX_WORD_LENGTH = 5;\nvar LetterState = /*#__PURE__*/function (LetterState) {\n  LetterState[\"MISS\"] = \"MISS\";\n  LetterState[\"MATCH\"] = \"MATCH\";\n  LetterState[\"PRESENT\"] = \"PRESENT\";\n  return LetterState;\n}(LetterState || {});\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * words.length)].toUpperCase();\n}\nfunction evaluateGuess(answer, guess) {\n  if (answer.length !== guess.length && guess.length !== MAX_WORD_LENGTH) {\n    return [];\n  }\n  const result = Array(MAX_WORD_LENGTH).fill(LetterState.MISS);\n  const lettersToCheck = answer.split(\"\");\n  const guessLetters = guess.split(\"\");\n  guessLetters.forEach((letter, i) => {\n    if (answer[i] === letter) {\n      result[i] = LetterState.MATCH;\n      lettersToCheck.splice(i === lettersToCheck.length ? i - 1 : i, 1);\n    }\n  });\n  guessLetters.forEach((letter, i) => {\n    if (lettersToCheck.includes(letter) && result[i] !== LetterState.MATCH) {\n      result[i] = LetterState.PRESENT;\n      lettersToCheck.splice(lettersToCheck.indexOf(letter), 1);\n    }\n  });\n  return result;\n}\nfunction isValidWord(word) {\n  return words.includes(word.toLowerCase());\n}\nexport { evaluateGuess, getRandomWord, isValidWord, LetterState, MAX_WORD_LENGTH };","map":{"version":3,"names":["words","MAX_WORD_LENGTH","LetterState","getRandomWord","Math","floor","random","length","toUpperCase","evaluateGuess","answer","guess","result","Array","fill","MISS","lettersToCheck","split","guessLetters","forEach","letter","i","MATCH","splice","includes","PRESENT","indexOf","isValidWord","word","toLowerCase"],"sources":["/Users/jelou/wordle/src/utils/word.utils.ts"],"sourcesContent":["import words from \"./lists/words.json\";\n\nconst MAX_WORD_LENGTH = 5;\n\nenum LetterState {\n  MISS = \"MISS\",\n  MATCH = \"MATCH\",\n  PRESENT = \"PRESENT\",\n}\n\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * words.length)].toUpperCase();\n}\n\nfunction evaluateGuess(answer: string, guess: string): LetterState[] {\n  if (answer.length !== guess.length && guess.length !== MAX_WORD_LENGTH) {\n    return [];\n  }\n\n  const result: LetterState[] = Array(MAX_WORD_LENGTH).fill(LetterState.MISS);\n\n  const lettersToCheck = answer.split(\"\");\n  const guessLetters = guess.split(\"\");\n\n  guessLetters.forEach((letter, i) => {\n    if (answer[i] === letter) {\n      result[i] = LetterState.MATCH;\n      lettersToCheck.splice(i === lettersToCheck.length ? i - 1 : i, 1);\n    }\n  });\n\n  guessLetters.forEach((letter, i) => {\n    if (lettersToCheck.includes(letter) && result[i] !== LetterState.MATCH) {\n      result[i] = LetterState.PRESENT;\n      lettersToCheck.splice(lettersToCheck.indexOf(letter), 1);\n    }\n  });\n\n  return result;\n}\n\nfunction isValidWord(word: string): boolean {\n  return words.includes(word.toLowerCase());\n}\n\nexport {\n  evaluateGuess,\n  getRandomWord,\n  isValidWord,\n  LetterState,\n  MAX_WORD_LENGTH,\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,oBAAoB;AAEtC,MAAMC,eAAe,GAAG,CAAC;AAAC,IAErBC,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA,EAAXA,WAAW;AAMhB,SAASC,aAAaA,CAAA,EAAG;EACvB,OAAOH,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AACtE;AAEA,SAASC,aAAaA,CAACC,MAAc,EAAEC,KAAa,EAAiB;EACnE,IAAID,MAAM,CAACH,MAAM,KAAKI,KAAK,CAACJ,MAAM,IAAII,KAAK,CAACJ,MAAM,KAAKN,eAAe,EAAE;IACtE,OAAO,EAAE;EACX;EAEA,MAAMW,MAAqB,GAAGC,KAAK,CAACZ,eAAe,CAAC,CAACa,IAAI,CAACZ,WAAW,CAACa,IAAI,CAAC;EAE3E,MAAMC,cAAc,GAAGN,MAAM,CAACO,KAAK,CAAC,EAAE,CAAC;EACvC,MAAMC,YAAY,GAAGP,KAAK,CAACM,KAAK,CAAC,EAAE,CAAC;EAEpCC,YAAY,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAClC,IAAIX,MAAM,CAACW,CAAC,CAAC,KAAKD,MAAM,EAAE;MACxBR,MAAM,CAACS,CAAC,CAAC,GAAGnB,WAAW,CAACoB,KAAK;MAC7BN,cAAc,CAACO,MAAM,CAACF,CAAC,KAAKL,cAAc,CAACT,MAAM,GAAGc,CAAC,GAAG,CAAC,GAAGA,CAAC,EAAE,CAAC,CAAC;IACnE;EACF,CAAC,CAAC;EAEFH,YAAY,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAClC,IAAIL,cAAc,CAACQ,QAAQ,CAACJ,MAAM,CAAC,IAAIR,MAAM,CAACS,CAAC,CAAC,KAAKnB,WAAW,CAACoB,KAAK,EAAE;MACtEV,MAAM,CAACS,CAAC,CAAC,GAAGnB,WAAW,CAACuB,OAAO;MAC/BT,cAAc,CAACO,MAAM,CAACP,cAAc,CAACU,OAAO,CAACN,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1D;EACF,CAAC,CAAC;EAEF,OAAOR,MAAM;AACf;AAEA,SAASe,WAAWA,CAACC,IAAY,EAAW;EAC1C,OAAO5B,KAAK,CAACwB,QAAQ,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;AAC3C;AAEA,SACEpB,aAAa,EACbN,aAAa,EACbwB,WAAW,EACXzB,WAAW,EACXD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}