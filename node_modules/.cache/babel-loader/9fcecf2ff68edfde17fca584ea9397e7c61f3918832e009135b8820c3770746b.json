{"ast":null,"code":"import create from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport CryptoJS from \"crypto-js\";\nimport { getRandomWord } from \"./utils\";\nconst secret = CryptoJS.enc.Utf8.parse(\"\");\nexport const MAX_GUESSES = 5;\nexport let GameState = /*#__PURE__*/function (GameState) {\n  GameState[GameState[\"WON\"] = 0] = \"WON\";\n  GameState[GameState[\"LOST\"] = 1] = \"LOST\";\n  GameState[GameState[\"IN_PROGRESS\"] = 2] = \"IN_PROGRESS\";\n  return GameState;\n}({});\nconst useStore = create(persist(set => ({\n  answer: getRandomWord(),\n  alreadyGuessed: [],\n  gameStatus: {\n    gameOver: false,\n    state: GameState.IN_PROGRESS\n  },\n  keysPressed: {},\n  addGuess: guess => set(state => {\n    // Rest of the function implementation...\n  }),\n  newGame: () => set(() => ({\n    answer: getRandomWord(),\n    alreadyGuessed: [],\n    gameStatus: {\n      gameOver: false,\n      state: GameState.IN_PROGRESS\n    },\n    keysPressed: {}\n  }))\n}), {\n  name: \"wordle-clone-storage\",\n  serialize: state => {\n    // Serialization implementation...\n  },\n  deserialize: state => {\n    // Deserialization implementation...\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","persist","CryptoJS","getRandomWord","secret","enc","Utf8","parse","MAX_GUESSES","GameState","useStore","set","answer","alreadyGuessed","gameStatus","gameOver","state","IN_PROGRESS","keysPressed","addGuess","guess","newGame","name","serialize","deserialize"],"sources":["/Users/jelou/wordle/src/store.ts"],"sourcesContent":["import create, { StateCreator } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport CryptoJS from \"crypto-js\";\n\nimport { evaluateGuess, getRandomWord, LetterState } from \"./utils\";\n\nconst secret = CryptoJS.enc.Utf8.parse(\"\");\n\nexport const MAX_GUESSES = 5;\n\nexport type IGuess = {\n  word: string;\n  state?: LetterState[];\n};\n\nexport enum GameState {\n  WON,\n  LOST,\n  IN_PROGRESS,\n}\n\ntype IGameStatus = {\n  gameOver: boolean;\n  state: GameState;\n};\n\nexport type IStoreState = {\n  answer: string;\n  alreadyGuessed: IGuess[];\n  keysPressed: Record<string, LetterState>;\n  addGuess: (guess: string) => void;\n  gameStatus: IGameStatus;\n  newGame: () => void;\n};\n\nconst useStore = create<IStoreState>(\n  persist<IStoreState>(\n    (set) => ({\n      answer: getRandomWord(),\n      alreadyGuessed: [],\n      gameStatus: {\n        gameOver: false,\n        state: GameState.IN_PROGRESS,\n      },\n      keysPressed: {},\n      addGuess: (guess: string) =>\n        set((state) => {\n          // Rest of the function implementation...\n        }),\n      newGame: () =>\n        set(() => ({\n          answer: getRandomWord(),\n          alreadyGuessed: [],\n          gameStatus: {\n            gameOver: false,\n            state: GameState.IN_PROGRESS,\n          },\n          keysPressed: {},\n        })),\n    }),\n    {\n      name: \"wordle-clone-storage\",\n      serialize: (state: any) => {\n        // Serialization implementation...\n      },\n      deserialize: (state: any) => {\n        // Deserialization implementation...\n      },\n    }\n  ) as StateCreator<IStoreState>\n);\n\nexport default useStore;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAwB,SAAS;AAC9C,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,OAAOC,QAAQ,MAAM,WAAW;AAEhC,SAAwBC,aAAa,QAAqB,SAAS;AAEnE,MAAMC,MAAM,GAAGF,QAAQ,CAACG,GAAG,CAACC,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC;AAE1C,OAAO,MAAMC,WAAW,GAAG,CAAC;AAO5B,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAoBrB,MAAMC,QAAQ,GAAGV,MAAM,CACrBC,OAAO,CACJU,GAAG,KAAM;EACRC,MAAM,EAAET,aAAa,CAAC,CAAC;EACvBU,cAAc,EAAE,EAAE;EAClBC,UAAU,EAAE;IACVC,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAEP,SAAS,CAACQ;EACnB,CAAC;EACDC,WAAW,EAAE,CAAC,CAAC;EACfC,QAAQ,EAAGC,KAAa,IACtBT,GAAG,CAAEK,KAAK,IAAK;IACb;EAAA,CACD,CAAC;EACJK,OAAO,EAAEA,CAAA,KACPV,GAAG,CAAC,OAAO;IACTC,MAAM,EAAET,aAAa,CAAC,CAAC;IACvBU,cAAc,EAAE,EAAE;IAClBC,UAAU,EAAE;MACVC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAEP,SAAS,CAACQ;IACnB,CAAC;IACDC,WAAW,EAAE,CAAC;EAChB,CAAC,CAAC;AACN,CAAC,CAAC,EACF;EACEI,IAAI,EAAE,sBAAsB;EAC5BC,SAAS,EAAGP,KAAU,IAAK;IACzB;EAAA,CACD;EACDQ,WAAW,EAAGR,KAAU,IAAK;IAC3B;EAAA;AAEJ,CACF,CACF,CAAC;AAED,eAAeN,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}