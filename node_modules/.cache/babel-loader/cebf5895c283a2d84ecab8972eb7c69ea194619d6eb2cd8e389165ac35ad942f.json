{"ast":null,"code":"var _jsxFileName = \"/Users/jelou/wordle/src/GuessGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNotification, usePrevious } from \"../../hooks\";\nimport useStore, { MAX_GUESSES } from \"../../store\";\nimport { isValidWord, MAX_WORD_LENGTH } from \"../../utils\";\nimport Guess from \"../Guess\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  isGuessInvalid: false\n};\nconst GuessGrid = _ref => {\n  _s();\n  let {\n    guess,\n    setGuess\n  } = _ref;\n  const [{\n    isGuessInvalid\n  }, setState] = useState(INITIAL_STATE);\n  const {\n    alreadyGuessed,\n    addGuess\n  } = useStore();\n  const previousGuess = usePrevious(guess);\n  const notification = useNotification();\n  useEffect(() => {\n    if (guess.length === 0 && (previousGuess === null || previousGuess === void 0 ? void 0 : previousGuess.length) === MAX_WORD_LENGTH) {\n      if (isValidWord(previousGuess)) {\n        if (alreadyGuessed.map(g => g.word).includes(previousGuess)) {\n          setState({\n            isGuessInvalid: true\n          });\n          setGuess(previousGuess);\n          notification.show(`You already guessed ${previousGuess}`);\n        } else {\n          setState({\n            isGuessInvalid: false\n          });\n          addGuess(previousGuess);\n        }\n      } else {\n        setState({\n          isGuessInvalid: true\n        });\n        setGuess(previousGuess);\n        notification.show(`${previousGuess} is not a valid word`);\n      }\n    }\n  }, [guess]);\n  useEffect(() => {\n    let timeout;\n    if (isGuessInvalid) {\n      timeout = setTimeout(() => {\n        setState({\n          isGuessInvalid: false\n        });\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [isGuessInvalid]);\n  let guesses = [...alreadyGuessed];\n  let currentRow = 0;\n  if (guesses.length < MAX_GUESSES) {\n    currentRow = guesses.push({\n      word: guess\n    }) - 1;\n  }\n  const numberOfGuessesRemaining = MAX_GUESSES - guesses.length;\n  guesses = guesses.concat(Array(numberOfGuessesRemaining).fill(\"\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 flex flex-col items-center justify-center py-5 px-4 mx-auto w-full md:1/3 lg:w-1/2 xl:w-1/3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-h-[75%] md:max-h-full grid grid-rows-6 gap-2\",\n      children: guesses.map((g, index) => /*#__PURE__*/_jsxDEV(Guess, {\n        guess: g,\n        isInvalid: isGuessInvalid && index === currentRow\n      }, `guess-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(GuessGrid, \"h6lrWYvxlWde1CRN1umh8/lZc1Q=\", false, function () {\n  return [useStore, usePrevious, useNotification];\n});\n_c = GuessGrid;\nexport default GuessGrid;\nvar _c;\n$RefreshReg$(_c, \"GuessGrid\");","map":{"version":3,"names":["useEffect","useState","useNotification","usePrevious","useStore","MAX_GUESSES","isValidWord","MAX_WORD_LENGTH","Guess","jsxDEV","_jsxDEV","INITIAL_STATE","isGuessInvalid","GuessGrid","_ref","_s","guess","setGuess","setState","alreadyGuessed","addGuess","previousGuess","notification","length","map","g","word","includes","show","timeout","setTimeout","clearTimeout","guesses","currentRow","push","numberOfGuessesRemaining","concat","Array","fill","className","children","index","isInvalid","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jelou/wordle/src/GuessGrid.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { useNotification, usePrevious } from \"../../hooks\";\nimport useStore, { MAX_GUESSES } from \"../../store\";\nimport { isValidWord, MAX_WORD_LENGTH } from \"../../utils\";\nimport Guess from \"../Guess\";\n\ntype IState = {\n  isGuessInvalid: boolean;\n};\n\nconst INITIAL_STATE: IState = {\n  isGuessInvalid: false,\n};\n\ntype IProps = {\n  guess: string;\n  setGuess: React.Dispatch<React.SetStateAction<string>>;\n};\n\nconst GuessGrid = ({ guess, setGuess }: IProps) => {\n  const [{ isGuessInvalid }, setState] = useState(INITIAL_STATE);\n  const { alreadyGuessed, addGuess } = useStore();\n  const previousGuess = usePrevious(guess);\n  const notification = useNotification();\n\n  useEffect(() => {\n    if (guess.length === 0 && previousGuess?.length === MAX_WORD_LENGTH) {\n      if (isValidWord(previousGuess)) {\n        if (alreadyGuessed.map((g) => g.word).includes(previousGuess)) {\n          setState({ isGuessInvalid: true });\n          setGuess(previousGuess);\n          notification.show(`You already guessed ${previousGuess}`);\n        } else {\n          setState({ isGuessInvalid: false });\n          addGuess(previousGuess);\n        }\n      } else {\n        setState({ isGuessInvalid: true });\n        setGuess(previousGuess);\n        notification.show(`${previousGuess} is not a valid word`);\n      }\n    }\n  }, [guess]);\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    if (isGuessInvalid) {\n      timeout = setTimeout(() => {\n        setState({ isGuessInvalid: false });\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [isGuessInvalid]);\n\n  let guesses = [...alreadyGuessed];\n  let currentRow = 0;\n\n  if (guesses.length < MAX_GUESSES) {\n    currentRow =\n      guesses.push({\n        word: guess,\n      }) - 1;\n  }\n\n  const numberOfGuessesRemaining = MAX_GUESSES - guesses.length;\n  guesses = guesses.concat(Array(numberOfGuessesRemaining).fill(\"\"));\n\n  return (\n    <div className=\"flex-1 flex flex-col items-center justify-center py-5 px-4 mx-auto w-full md:1/3 lg:w-1/2 xl:w-1/3\">\n      <div className=\"w-full h-full max-h-[75%] md:max-h-full grid grid-rows-6 gap-2\">\n        {guesses.map((g, index) => (\n          <Guess\n            key={`guess-${index}`}\n            guess={g}\n            isInvalid={isGuessInvalid && index === currentRow}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}